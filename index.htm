<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="style.css">
    <title>Byggnadsminnen i Västernorrlands län</title>
</head>

<body>
    <h1>Byggnadsminnen i Västernorrlands län</h1>
    <div id="map">&nbsp;</div>
    <script type="text/javascript">

        //Files
        const MAP_STYLES = "mapStyles.json";
        const PLACE_DATA = "byggnadsminnen.json"; //Source: Wikipedia CC BY-SA 3.0 https://sv.wikipedia.org/wiki/Lista_%C3%B6ver_byggnadsminnen_i_V%C3%A4sternorrlands_l%C3%A4n
        const EXCLUDING_OVERLAY = "yLanInverted.geojson" //Source: Lantmäteriet Open Data ( https://www.lantmateriet.se/en/geodata/geodata-products/open-data/ ). Edited in qGIS
        
        //Geography. Maximum points of Västernorrland County. 
        const WEST_LONGITUDE = 14.7810925;
        const EAST_LONGITUDE = 19.3144485;
        const SOUTH_LATITUDE = 62.1176224;
        const NORTH_LATITUDE = 64.0274754;
        
        // GUI settings
        const MARKER_COLOR = "#00AAFF"
        const SELECTED_COLOR = "#FF00AA"
        const HOVER_COLOR = "#AA00FF"
        const MARKER_OPACITY = 0.6;
        const LABEL_COLOR = "rgba(255, 255, 255, 0.7)"
        const LABEL_SIZE = "18px"
        const LABEL_WEIGHT = "600";
        
        // Variables for managing markers and clusters
        let selectedMarker = null;
        const markers = [];
        let selectedMarkers = [];
        let selectedClusterMarker = null;
        let selectedClusterMarkers = [];
        let clusterMixed = null;
        
        //HTML DOM elements
        const mapElement = document.getElementById("map");

        function initMap() {
            fetch(MAP_STYLES).then(response => {
                return response.json();
            }).then(styleData => {
                const mapOptions = {
                    center: new google.maps.LatLng((SOUTH_LATITUDE + NORTH_LATITUDE) / 2, (WEST_LONGITUDE + EAST_LONGITUDE) / 2),
                    zoom: 8,
                    minZoom: 8,
                    zoomControl: true,
                    zoomControlOptions: {
                        style: google.maps.ZoomControlStyle.DEFAULT,
                    },
                    disableDoubleClickZoom: true,
                    mapTypeControl: false,
                    scaleControl: true,
                    scrollwheel: true,
                    panControl: true,
                    streetViewControl: false,
                    fullscreenControl: false,
                    draggable: true,
                    restriction: {
                        latLngBounds: {
                            south: SOUTH_LATITUDE,
                            north: NORTH_LATITUDE,
                            west: WEST_LONGITUDE,
                            east: EAST_LONGITUDE,
                        },
                    },
                    overviewMapControl: true,
                    overviewMapControlOptions: {
                        opened: false,
                    },
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    styles: styleData
                }
                const map = new google.maps.Map(mapElement, mapOptions);
        
                // Excluding overlay
                map.data.loadGeoJson(EXCLUDING_OVERLAY);
                // Overlay style            
                map.data.setStyle({
                    //Overlay white; solid: 
                    fillColor: "white",
                    fillOpacity: 1,
                    //No border of overlay to let water be the border as water is white in this case:  
                    strokeWeight: 0,
                    //Border color. Obsolete as we want water to be the border and has set weight to 0.  
                    strokeColor: "#0000FF"
                });
        
                fetch(PLACE_DATA).then(response => {
                    return response.json();
                }).then(data => {
                 
                    // Function to create a marker icon with specified fill color
                    function createMarkerIcon(fillColor) {
                        return {
                            path: "M 0 0 q 2.906 0 4.945 2.039 t 2.039 4.945 q 0 1.453 -0.727 3.328 t -1.758 3.516 t -2.039 3.07 t -1.711 2.273 l -0.75 0.797 q -0.281 -0.328 -0.75 -0.867 t -1.688 -2.156 t -2.133 -3.141 t -1.664 -3.445 t -0.75 -3.375 q 0 -2.906 2.039 -4.945 t 4.945 -2.039 z", // Source of marker path: Google
                            fillColor: fillColor,
                            fillOpacity: MARKER_OPACITY,
                            strokeWeight: 0,
                            rotation: 0,
                            scale: 1.7,
                            anchor: new google.maps.Point(0, 20),
                            labelOrigin: new google.maps.Point(0, 8)
                        };
                    }
                 
                    // Create marker icons with different colors
                    const markerIcon = createMarkerIcon(MARKER_COLOR);
                    const markerIconSelected = createMarkerIcon(SELECTED_COLOR);
                    const markerIconHover = createMarkerIcon(HOVER_COLOR);
                 
                    // Function to create an SVG image with a gradient
                    function createSVGWithGradient(stopColor1, stopColor2) {
                        return window.btoa(`
				<svg
					xmlns="http://www.w3.org/2000/svg">
					<defs>
						<linearGradient id="gradient" x1="0" x2="1" y1="0" y2="1">
							<stop offset="0%" stop-color="${stopColor1}"/>
							<stop offset="40%" stop-color="${stopColor1}"/>
							<stop offset="60%" stop-color="${stopColor2}" />
							<stop offset="100%" stop-color="${stopColor2}" />
						</linearGradient>
					</defs>
					<circle cx="50%" cy="50%" opacity="${MARKER_OPACITY}" r="30%" fill="url(#gradient)" />
				</svg>
    `);
                    }
                  
                    // Function to create a cluster icon with a gradient
                    function createClusterIcon(svgData) {
                        return {
                            url: `data:image/svg+xml;base64,${svgData}`,
                            scaledSize: new google.maps.Size(50, 50),
                        };
                    }
                  
                    // Create cluster icons with different gradients. Same colors result in solid cluster icon. 
                    const clusterIcon = createClusterIcon(createSVGWithGradient(MARKER_COLOR, MARKER_COLOR));
                    const clusterIconSelected = createClusterIcon(createSVGWithGradient(SELECTED_COLOR, SELECTED_COLOR));
                    const clusterIconHover = createClusterIcon(createSVGWithGradient(HOVER_COLOR, HOVER_COLOR));
                    const clusterIconMixed = createClusterIcon(createSVGWithGradient(MARKER_COLOR, SELECTED_COLOR));
                  
                    // Function to reset marker and cluster icons to their default states
                    function resetMarkers() {
                        if (selectedMarker) {
                            selectedMarker.setIcon(markerIcon);
                            selectedMarker = null;
                        }
                        selectedMarkers.forEach(marker => marker.setIcon(markerIcon));
                        selectedMarkers = [];
                        if (selectedClusterMarker) {
                            selectedClusterMarker.setIcon(clusterIcon);
                            selectedClusterMarker = null;
                        }
                        selectedClusterMarkers.forEach(marker => marker.setIcon(clusterIcon));
                        selectedClusterMarkers = [];
                    }
                  
                    // Loop through the data and create markers for each place The first letter of the name is set as label. 
                    data.places.forEach(function (place) {
                        const myLatLng = {
                            lat: place.lat,
                            lng: place.long
                        };
                        const marker = new google.maps.Marker({
                            label: {
                                text: place.namn.charAt(0).toUpperCase(),
                                color: LABEL_COLOR,
                                fontSize: LABEL_SIZE,
                                fontWeight: LABEL_WEIGHT
                            },
                            position: myLatLng,
                            map,
                            title: place.namn,
                            icon: markerIcon,
                        });
                      
                        // Event listeners for marker interactions
                        google.maps.event.addListener(marker, "click", function () {
                            if (this != selectedMarker) {
                                resetMarkers();
                                selectedMarker = this;
                            }
                            this.setIcon(markerIconSelected);
                        });
                        google.maps.event.addListener(marker, "mouseover", function () {
                            this.setIcon(markerIconHover);
                        });
                        google.maps.event.addListener(marker, "mouseout", function () {
                            if (this === selectedMarker || selectedMarkers.includes(this)) {
                                this.setIcon(markerIconSelected);
                            } else {
                                this.setIcon(markerIcon);
                            }
                        });
                    
                        markers.push(marker);
                    
                    });
                    
                    // Function to handle click event on a cluster
                    function onClusterClick(e, cluster, map) {
                        resetMarkers()
                        cluster.markers.forEach(function (marker) {
                            marker.setIcon(markerIconSelected);
                            selectedMarkers.push(marker);
                        });
                        map.setZoom(map.getZoom() + 1);           // Change zoom level by 1
                        map.panTo(cluster.position);              // Center the map on the cluster. panTo for smoother animation compared to setCenter. 
                    }

                    // Renderer object for cluster marker rendering
                    const renderer = {
                        render: ({
                            count,
                            position
                        }) => {
                            marker = new google.maps.Marker({
                                label: {
                                    text: String(count),
                                    color: LABEL_COLOR,
                                    fontSize: LABEL_SIZE,
                                    fontWeight: LABEL_WEIGHT
                                },
                                icon: clusterIcon,
                                position,
                                zIndex: Number(google.maps.Marker.MAX_ZINDEX) + count,                    // adjust zIndex to be above other markers
                            });

                            google.maps.event.addListener(marker, "click", function () {
                                if (this != selectedClusterMarker) {
                                    if (selectedClusterMarker) {
                                        selectedClusterMarker.setIcon(clusterIcon);
                                    }
                                    this.setIcon(clusterIconSelected);
                                    selectedClusterMarker = this;
                                }
                            });

                            google.maps.event.addListener(marker, "mouseover", function () {
                                this.setIcon(clusterIconHover);
                            });

                            google.maps.event.addListener(marker, "mouseout", function () {
                                if (selectedClusterMarker == this || selectedClusterMarkers.includes(this)) {
                                    if (this == clusterMixed) {
                                        this.setIcon(clusterIconMixed);
                                    } else {
                                        this.setIcon(clusterIconSelected);
                                    }
                                } else {
                                    this.setIcon(clusterIcon);
                                }
                            });

                            return marker
                        }
                    };

                   
                    const algorithm = new markerClusterer.GridAlgorithm({
                        gridSize: 40  //This is default
                    });

                    // Alternative cluster algorithm. I'm not super happy about positioning of the SuperCluster:  
                    //  let algorithm = new markerClusterer.SuperClusterAlgorithm({ radius: 80});
                    
                    const markerCluster = new markerClusterer.MarkerClusterer({
                        map: map,
                        markers: markers,
                        renderer: renderer,
                        algorithm: algorithm,
                        onClusterClick: onClusterClick
                    });
                    
                    // Function to set the cluster icon based on if all child markers are selected, only some or none. 
                    function setClusterIcon(cluster) {
                        if (cluster.markers.length > selectedMarkers.length) {
                            cluster.marker.setIcon(clusterIconMixed);
                            clusterMixed = cluster.marker;
                        } else {
                            cluster.marker.setIcon(clusterIconSelected);
                        }
                    }
                    
                    //Event listener for end of clustering. 
                    google.maps.event.addListener(markerCluster, "clusteringend", function () {
                        this.clusters.forEach(cluster => {
                            if (cluster.markers.length > 1) {
                                cluster.markers.forEach(marker => {
                                    if (selectedMarkers.includes(marker) || marker === selectedMarker) {
                                        selectedClusterMarkers.push(cluster.marker);
                                        setClusterIcon(cluster);
                                    }
                                });
                            }
                        });
                    });
                
                }).catch(error => {
                    console.log("Error loading place data:", error);
                });
            
            }).catch(error => {
                console.log("Error loading style data:", error);
            });
        }
    </script>

    <script src="https://unpkg.com/@googlemaps/markerclusterer/dist/index.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCZ7_EhLr6NijAtOFSN2HW8OSZBHpnb0lM&region=SE&language=sv&callback=initMap"></script>

</body>

</html>